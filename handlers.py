import random
from aiogram import Router, types
from aiogram.filters import CommandStart
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State

from data import product_search_instance

router = Router()


class QueryState(StatesGroup):
    waiting_for_clarification = State()


# –ü—Ä–∏ /start —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.message(CommandStart())
async def start_command(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏, —á—Ç–æ —Ç—ã –∏—â–µ—à—å")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —É—Ç–æ—á–Ω—è—é—â–∏–π –≤–æ–ø—Ä–æ—Å (—Å–æ—Å—Ç–æ—è–Ω–∏–µ waiting_for_clarification)
@router.message(QueryState.waiting_for_clarification)
async def clarification_handler(message: types.Message, state: FSMContext):
    data = await state.get_data()
    original_query = data.get("original_query", "")
    accumulated = data.get("accumulated_clarification", "")
    new_input = message.text.strip()

    # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ —É—Ç–æ—á–Ω–µ–Ω–∏—è: –µ—Å–ª–∏ —É–∂–µ —á—Ç–æ-—Ç–æ –±—ã–ª–æ, –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–±–µ–ª –∏ –Ω–æ–≤–æ–µ —É—Ç–æ—á–Ω–µ–Ω–∏–µ
    if accumulated:
        new_accumulated = f"{accumulated} {new_input}"
    else:
        new_accumulated = new_input

    combined_query = f"{original_query} {new_accumulated}"
    await state.update_data(accumulated_clarification=new_accumulated)

    results, need_clarification = product_search_instance.search(combined_query)

    if need_clarification:
        clarifying_texts = [
            "–ü–æ –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É –∑–∞–ø—Ä–æ—Å—É —Ç–æ–≤–∞—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–∫–∞–∑–∞—Ç—å, –∫–∞–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –≤–∞—Å –Ω–∞–∏–±–æ–ª–µ–µ –≤–∞–∂–Ω—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ü–≤–µ—Ç, —Ä–∞–∑–º–µ—Ä, –º–∞—Ç–µ—Ä–∏–∞–ª –∏–ª–∏ –±—Ä–µ–Ω–¥)",
            "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Ç–æ–≤–∞—Ä—ã –ø–æ –≤–∞—à–µ–º—É —É—Ç–æ—á–Ω–µ–Ω–∏—é. –û–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ä–æ–±–Ω–µ–µ, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –≤—ã –∏—â–µ—Ç–µ, –∏ –∫–∞–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –¥–ª—è –≤–∞—Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã",
            "–ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤. –£—Ç–æ—á–Ω–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏, —Ç–∞–∫–∏–µ –∫–∞–∫ —Å—Ç–∏–ª—å, –±—Ä–µ–Ω–¥ –∏–ª–∏ –∂–µ–ª–∞–µ–º—ã–π —Ü–µ–Ω–æ–≤–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω",
            "–ü–æ—Ö–æ–∂–µ, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ. –°–æ–æ–±—â–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª, –º–∞—Ç–µ—Ä–∏–∞–ª –∏–ª–∏ —Ä–∞–∑–º–µ—Ä), —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –ª—É—á—à–∏–π –≤–∞—Ä–∏–∞–Ω—Ç",
            "–ü–æ –≤–∞—à–µ–º—É —É—Ç–æ—á–Ω–µ–Ω–∏—é —Ç–æ–≤–∞—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ–ø–∏—Å–∞—Ç—å, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –≤–∞–º –Ω—É–∂–Ω–æ: —É–∫–∞–∂–∏—Ç–µ, –∫–∞–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –¥–ª—è –≤–∞—Å –≤–∞–∂–Ω—ã"
        ]
        clarifying_question = random.choice(clarifying_texts)
        await message.answer(clarifying_question)
        # –û—Å—Ç–∞—ë–º—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏, –æ–∂–∏–¥–∞—è –Ω–æ–≤–æ–≥–æ —É—Ç–æ—á–Ω–µ–Ω–∏—è
        return

    # –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä—ã –Ω–∞–π–¥–µ–Ω—ã ‚Äì –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    for product in results:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏", url=product['link'])]
        ])
        text = (
            f"<b>{product['name']}</b>\n\n"
            f"<b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {product['category']}\n\n"
            f"{product['description']}\n\n"
            f"<b>–¶–µ–Ω–∞:</b> {product['price']} —Ä—É–±."
        )
        await message.answer(text, reply_markup=keyboard, parse_mode="HTML")
    await message.answer("–ï—Å–ª–∏ –µ—â—ë —á—Ç–æ-—Ç–æ –∏—â–∏—Ç–µ, –Ω–∞–ø–∏—à–∏—Ç–µ üëá")
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
    await state.clear()


# –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤, –∫–æ–≥–¥–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
@router.message()
async def initial_query_handler(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is not None:
        return

    query = message.text
    results, need_clarification = product_search_instance.search(query)

    # –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –Ω–∞–π–¥–µ–Ω–æ ‚Äì –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Ä–µ–∂–∏–º —É—Ç–æ—á–Ω–µ–Ω–∏—è
    if need_clarification:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ —É—Ç–æ—á–Ω–µ–Ω–∏—è
        await state.update_data(original_query=query, accumulated_clarification="")
        clarifying_texts = [
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏—Ç–µ: –∫–∞–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –≤–∞—Å –Ω–∞–∏–±–æ–ª–µ–µ –≤–∞–∂–Ω—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ü–≤–µ—Ç, —Ä–∞–∑–º–µ—Ä, –º–∞—Ç–µ—Ä–∏–∞–ª, –±—Ä–µ–Ω–¥)?",
            "–ù–µ –º–æ–≥–ª–∏ –±—ã –≤—ã –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ–ø–∏—Å–∞—Ç—å, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –∏—â–µ—Ç–µ? –£–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ —Å—Ç–∏–ª—é, —Ü–µ–Ω–µ –∏–ª–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É",
            "–ß—Ç–æ–±—ã –ø–æ–¥–æ–±—Ä–∞—Ç—å –¥–ª—è –≤–∞—Å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Ç–æ–≤–∞—Ä, —Å–æ–æ–±—â–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏: –∂–µ–ª–∞–µ–º—ã–π –±—Ä–µ–Ω–¥, —Ü–µ–Ω–æ–≤–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω –∏–ª–∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏",
            "–û–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–∞–∫–∏–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –¥–ª—è –≤–∞—Å —è–≤–ª—è—é—Ç—Å—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–º–∏: –∫–∞—á–µ—Å—Ç–≤–æ, —Ü–≤–µ—Ç, —Ä–∞–∑–º–µ—Ä –∏–ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏",
            "–£—Ç–æ—á–Ω–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–∞–∫–∏–µ –∏–º–µ–Ω–Ω–æ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç, —á—Ç–æ–±—ã —è —Å–º–æ–≥ –Ω–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä, –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –≤–∞—à–∏–º –æ–∂–∏–¥–∞–Ω–∏—è–º"
        ]
        clarifying_question = random.choice(clarifying_texts)
        await state.set_state(QueryState.waiting_for_clarification)
        await message.answer(
            f"–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤.\n\n{clarifying_question}"
        )
        return

    # –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä—ã –Ω–∞–π–¥–µ–Ω—ã ‚Äì –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π —Ç–æ–≤–∞—Ä –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    for product in results:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏", url=product['link'])]
        ])
        text = (
            f"<b>{product['name']}</b>\n"
            f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {product['category']}\n\n"
            f"{product['description']}\n\n"
            f"–¶–µ–Ω–∞: {product['price']}"
        )
        await message.answer(text, reply_markup=keyboard, parse_mode="HTML")
    # –í –¥–∞–Ω–Ω–æ–º –ø—Ä–∏–º–µ—Ä–µ –±–ª–æ–∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —É—Ç–æ—á–Ω–µ–Ω–∏—è –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω
    # –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —É—Ç–æ—á–Ω–µ–Ω–∏–µ, –º–æ–∂–Ω–æ —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –±–ª–æ–∫ –Ω–∏–∂–µ
    await message.answer("–ï—Å–ª–∏ –µ—â—ë —á—Ç–æ-—Ç–æ –∏—â–∏—Ç–µ, –Ω–∞–ø–∏—à–∏—Ç–µ üëá")
    """
    if random.random() < 0.3:
        await state.update_data(original_query=query, accumulated_clarification="")
        clarifying_texts = [
            "–£—Ç–æ—á–Ω–∏—Ç–µ, –∫–∞–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –≤–∞—Å –æ—Å–æ–±–µ–Ω–Ω–æ –≤–∞–∂–Ω—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, –º–∞—Ç–µ—Ä–∏–∞–ª, —Ü–≤–µ—Ç, —Ä–∞–∑–º–µ—Ä –∏–ª–∏ –±—Ä–µ–Ω–¥)?",
            "–ú–æ–∂–µ—Ç–µ —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç? –í–æ–∑–º–æ–∂–Ω–æ, —É–∫–∞–∑–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∏–ª–∏ –∂–µ–ª–∞–µ–º—ã–π —Ü–µ–Ω–æ–≤–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω.,
            "–î–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –ø–æ–¥–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–∞ —É–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏: —Å—Ç–∏–ª—å, —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∏–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏",
            "–û–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, —Ç–∞–∫–∏–µ –∫–∞–∫ –∫–∞—á–µ—Å—Ç–≤–æ, –±—Ä–µ–Ω–¥ –∏–ª–∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –¥–∏–∑–∞–π–Ω–∞",
            "–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π: –∫–∞–∫–∏–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ü–≤–µ—Ç, –º–∞—Ç–µ—Ä–∏–∞–ª, —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª) –¥–ª—è –≤–∞—Å —è–≤–ª—è—é—Ç—Å—è —Ä–µ—à–∞—é—â–∏–º–∏?"
        ]
        clarifying_question = random.choice(clarifying_texts)
        await state.set_state(QueryState.waiting_for_clarification)
        await message.answer(clarifying_question)
    """
