import os
import csv
import random
import datetime
from aiogram import Router, types, F
from aiogram.filters import CommandStart, Command
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, InputFile, FSInputFile, KeyboardButton, \
    ReplyKeyboardMarkup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.utils.formatting import Text

from data import product_search_instance

router = Router()

# –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å–µ—Å—Å–∏–π –∏ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏ —Ç–æ–≤–∞—Ä–æ–≤
SESSIONS_LOG_FILE = "sessions.csv"
POPULAR_PRODUCTS_FILE = "popular_products.csv"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è CSV-—Ñ–∞–π–ª–æ–≤ (–µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç)
if not os.path.exists(SESSIONS_LOG_FILE):
    with open(SESSIONS_LOG_FILE, mode="w", newline="", encoding="utf-8") as f:
        writer = csv.writer(f)
        writer.writerow(["timestamp", "user_id", "username", "event", "text"])

if not os.path.exists(POPULAR_PRODUCTS_FILE):
    with open(POPULAR_PRODUCTS_FILE, mode="w", newline="", encoding="utf-8") as f:
        writer = csv.writer(f)
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º: name, category, description, price, link, count
        writer.writerow(["name", "category", "description", "price", "link", "count"])

def log_session(user: types.User, event: str, text: str):
    """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏–µ —Å–µ—Å—Å–∏–∏ –≤ CSV-—Ñ–∞–π–ª."""
    timestamp = datetime.datetime.now().isoformat(sep=" ", timespec="seconds")
    with open(SESSIONS_LOG_FILE, mode="a", newline="", encoding="utf-8") as f:
        writer = csv.writer(f)
        writer.writerow([timestamp, user.id, user.username or "", event, text])

def update_popular_product(product: dict):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∏–ª–∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–ø–∏—Å—å –æ —Ç–æ–≤–∞—Ä–µ –≤ —Ñ–∞–π–ª–µ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏."""
    # –°—á–∏—Ç—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
    rows = []
    found = False
    if os.path.exists(POPULAR_PRODUCTS_FILE):
        with open(POPULAR_PRODUCTS_FILE, mode="r", newline="", encoding="utf-8") as f:
            reader = csv.DictReader(f)
            for row in reader:
                # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ —É–Ω–∏–∫–∞–ª—å–Ω–æ–º—É –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É —Ç–æ–≤–∞—Ä–∞ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –ø–æ name –∏ link
                if row["name"] == product["name"] and row["link"] == product["link"]:
                    row["count"] = str(int(row["count"]) + 1)
                    found = True
                rows.append(row)
    # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
    if not found:
        rows.append({
            "name": product["name"],
            "category": product["category"],
            "description": product["description"],
            "price": product["price"],
            "link": product["link"],
            "count": "1"
        })
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    with open(POPULAR_PRODUCTS_FILE, mode="w", newline="", encoding="utf-8") as f:
        fieldnames = ["name", "category", "description", "price", "link", "count"]
        writer = csv.DictWriter(f, fieldnames=fieldnames)
        writer.writeheader()
        writer.writerows(rows)

def get_top_popular_products(top_n=3):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–æ–ø–æ–≤—ã—Ö –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤."""
    products = []
    if os.path.exists(POPULAR_PRODUCTS_FILE):
        with open(POPULAR_PRODUCTS_FILE, mode="r", newline="", encoding="utf-8") as f:
            reader = csv.DictReader(f)
            for row in reader:
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—á—ë—Ç—á–∏–∫ –≤ —á–∏—Å–ª–æ
                row["count"] = int(row["count"])
                products.append(row)
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é count
    products = sorted(products, key=lambda x: x["count"], reverse=True)
    return products[:top_n]

class QueryState(StatesGroup):
    waiting_for_clarification = State()

@router.message(CommandStart())
async def start_command(message: types.Message, state: FSMContext):
    await state.clear()
    log_session(message.from_user, "start", message.text)
    popular_button = ReplyKeyboardMarkup(keyboard=[
        [KeyboardButton(text="–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã")]
    ], resize_keyboard=True)
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏, —á—Ç–æ —Ç—ã –∏—â–µ—à—å", reply_markup=popular_button)

@router.message(Command("sessions"))
async def sessions_handler(message: types.Message):
    if not os.path.exists(SESSIONS_LOG_FILE):
        await message.answer("–î–∞–Ω–Ω—ã—Ö –æ —Å–µ—Å—Å–∏—è—Ö –ø–æ–∫–∞ –Ω–µ—Ç.")
        return

    with open(SESSIONS_LOG_FILE, "r", encoding="utf-8") as f:
        reader = csv.reader(f)
        rows = list(reader)

    if not rows:
        await message.answer("–î–∞–Ω–Ω—ã—Ö –æ —Å–µ—Å—Å–∏—è—Ö –ø–æ–∫–∞ –Ω–µ—Ç.")
        return

    table_lines = []
    for row in rows:
        table_lines.append("\t".join(row))
    table_text = "\n".join(table_lines)

    temp_filename = "sessions_export.txt"
    with open(temp_filename, "w", encoding="utf-8") as f:
        f.write(table_text)
    await message.answer_document(FSInputFile(temp_filename))
    os.remove(temp_filename)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –Ω–∞–∂–∞—Ç–∏—é –∫–Ω–æ–ø–∫–∏
@router.message(F.text == "–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã")
async def popular_products_handler(message: types.Message):
    top_products = get_top_popular_products()
    if not top_products:
        await message.answer("–ü–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")
        return

    for product in top_products:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏", url=product['link'])]
        ])
        text = (
            f"<b>{product['name']}</b>\n\n"
            f"<b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {product['category']}\n\n"
            f"{product['description']}\n\n"
            f"<b>–¶–µ–Ω–∞:</b> {product['price']} —Ä—É–±.\n"
            f"<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤:</b> {product['count']}"
        )
        await message.answer(text, reply_markup=keyboard, parse_mode="HTML")

@router.message(QueryState.waiting_for_clarification)
async def clarification_handler(message: types.Message, state: FSMContext):
    data = await state.get_data()
    original_query = data.get("original_query", "")
    accumulated = data.get("accumulated_clarification", "")
    new_input = message.text.strip()

    if accumulated:
        new_accumulated = f"{accumulated} {new_input}"
    else:
        new_accumulated = new_input

    combined_query = f"{original_query} {new_accumulated}"
    await state.update_data(accumulated_clarification=new_accumulated)
    log_session(message.from_user, "clarification", f"Original: {original_query} | New: {new_input}")

    results, need_clarification = product_search_instance.search(combined_query)

    if need_clarification:
        clarifying_texts = [
            "–ü–æ –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É –∑–∞–ø—Ä–æ—Å—É —Ç–æ–≤–∞—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–∫–∞–∑–∞—Ç—å, –∫–∞–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –≤–∞—Å –Ω–∞–∏–±–æ–ª–µ–µ –≤–∞–∂–Ω—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ü–≤–µ—Ç, —Ä–∞–∑–º–µ—Ä, –º–∞—Ç–µ—Ä–∏–∞–ª –∏–ª–∏ –±—Ä–µ–Ω–¥)",
            "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Ç–æ–≤–∞—Ä—ã –ø–æ –≤–∞—à–µ–º—É —É—Ç–æ—á–Ω–µ–Ω–∏—é. –û–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ä–æ–±–Ω–µ–µ, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –≤—ã –∏—â–µ—Ç–µ, –∏ –∫–∞–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –¥–ª—è –≤–∞—Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã",
            "–ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤. –£—Ç–æ—á–Ω–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏, —Ç–∞–∫–∏–µ –∫–∞–∫ —Å—Ç–∏–ª—å, –±—Ä–µ–Ω–¥ –∏–ª–∏ –∂–µ–ª–∞–µ–º—ã–π —Ü–µ–Ω–æ–≤–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω",
            "–ü–æ—Ö–æ–∂–µ, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ. –°–æ–æ–±—â–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª, –º–∞—Ç–µ—Ä–∏–∞–ª –∏–ª–∏ —Ä–∞–∑–º–µ—Ä), —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –ª—É—á—à–∏–π –≤–∞—Ä–∏–∞–Ω—Ç",
            "–ü–æ –≤–∞—à–µ–º—É —É—Ç–æ—á–Ω–µ–Ω–∏—é —Ç–æ–≤–∞—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ–ø–∏—Å–∞—Ç—å, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –≤–∞–º –Ω—É–∂–Ω–æ: —É–∫–∞–∂–∏—Ç–µ, –∫–∞–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –¥–ª—è –≤–∞—Å –≤–∞–∂–Ω—ã"
        ]
        clarifying_question = random.choice(clarifying_texts)
        await message.answer(clarifying_question)
        return

    for product in results:
        update_popular_product(product)
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏", url=product['link'])]
        ])
        text = (
            f"<b>{product['name']}</b>\n\n"
            f"<b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {product['category']}\n\n"
            f"{product['description']}\n\n"
            f"<b>–¶–µ–Ω–∞:</b> {product['price']} —Ä—É–±."
        )
        await message.answer(text, reply_markup=keyboard, parse_mode="HTML")
        log_session(message.from_user, "result_sent", f"Product: {product['name']} | Price: {product['price']}")
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤

    await message.answer("–ï—Å–ª–∏ –µ—â—ë —á—Ç–æ-—Ç–æ –∏—â–∏—Ç–µ, –Ω–∞–ø–∏—à–∏—Ç–µ üëá")
    await state.clear()

@router.message()
async def initial_query_handler(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is not None:
        return

    query = message.text
    log_session(message.from_user, "query", query)
    results, need_clarification = product_search_instance.search(query)

    if need_clarification:
        await state.update_data(original_query=query, accumulated_clarification="")
        clarifying_texts = [
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏—Ç–µ: –∫–∞–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –≤–∞—Å –Ω–∞–∏–±–æ–ª–µ–µ –≤–∞–∂–Ω—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ü–≤–µ—Ç, —Ä–∞–∑–º–µ—Ä, –º–∞—Ç–µ—Ä–∏–∞–ª, –±—Ä–µ–Ω–¥)?",
            "–ù–µ –º–æ–≥–ª–∏ –±—ã –≤—ã –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ–ø–∏—Å–∞—Ç—å, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –∏—â–µ—Ç–µ? –£–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ —Å—Ç–∏–ª—é, —Ü–µ–Ω–µ –∏–ª–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É",
            "–ß—Ç–æ–±—ã –ø–æ–¥–æ–±—Ä–∞—Ç—å –¥–ª—è –≤–∞—Å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Ç–æ–≤–∞—Ä, —Å–æ–æ–±—â–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏: –∂–µ–ª–∞–µ–º—ã–π –±—Ä–µ–Ω–¥, —Ü–µ–Ω–æ–≤–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω –∏–ª–∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏",
            "–û–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–∞–∫–∏–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –¥–ª—è –≤–∞—Å —è–≤–ª—è—é—Ç—Å—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–º–∏: –∫–∞—á–µ—Å—Ç–≤–æ, —Ü–≤–µ—Ç, —Ä–∞–∑–º–µ—Ä –∏–ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏",
            "–£—Ç–æ—á–Ω–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–∞–∫–∏–µ –∏–º–µ–Ω–Ω–æ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç, —á—Ç–æ–±—ã —è —Å–º–æ–≥ –Ω–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä, –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –≤–∞—à–∏–º –æ–∂–∏–¥–∞–Ω–∏—è–º"
        ]
        clarifying_question = random.choice(clarifying_texts)
        await state.set_state(QueryState.waiting_for_clarification)
        await message.answer(
            f"–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤.\n\n{clarifying_question}"
        )
        return

    for product in results:
        update_popular_product(product)
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏", url=product['link'])]
        ])
        text = (
            f"<b>{product['name']}</b>\n\n"
            f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {product['category']}\n\n"
            f"{product['description']}\n\n"
            f"–¶–µ–Ω–∞: {product['price']}"
        )
        await message.answer(text, reply_markup=keyboard, parse_mode="HTML")
        log_session(message.from_user, "result_sent", f"Product: {product['name']} | Price: {product['price']}")

    await message.answer("–ï—Å–ª–∏ –µ—â—ë —á—Ç–æ-—Ç–æ –∏—â–∏—Ç–µ, –Ω–∞–ø–∏—à–∏—Ç–µ üëá")
